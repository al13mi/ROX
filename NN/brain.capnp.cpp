// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: brain.capnp

#include "brain.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<52> b_82d74e22b57a02f1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    241,   2, 122, 181,  34,  78, 215, 130,
     12,   0,   0,   0,   3,   0,   0,   0,
     75, 209, 102, 115,  17,  11,  21, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0, 135,   0,   0,   0,
    161,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   1,   0,   1,   0,
    236, 145,  33,  33, 153,  30, 125, 202,
     25,   0,   0,   0,  58,   0,   0,   0,
    237,  14, 204, 140,  94,  77,  41, 179,
     21,   0,   0,   0,  50,   0,   0,   0,
    144, 174,  95,  56,  20, 168, 177, 209,
     17,   0,   0,   0, 122,   0,   0,   0,
    243,  54,   1, 252, 242, 115, 186, 245,
     17,   0,   0,   0,  74,   0,   0,   0,
     80,  97,  99, 107, 101, 116,   0,   0,
     69, 110, 116, 114, 121,   0,   0,   0,
     65,  99, 116, 117,  97, 108,  80, 114,
    105, 111, 114, 105, 116, 121,   0,   0,
     80, 114, 105, 111, 114, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49, 121,   4,  71,  12,  80, 121, 236,
    121, 109, 117, 122, 186,  58, 159, 228,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     22, 136,  87,  72, 234, 228, 142, 168,
    126, 123, 125, 185, 106, 131, 213, 247,
     25,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    112, 114, 101, 100, 105,  99, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 101,  97, 114, 110,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_82d74e22b57a02f1 = b_82d74e22b57a02f1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_82d74e22b57a02f1[] = {
  &s_a88ee4ea48578816,
  &s_e49f3aba7a756d79,
  &s_ec79500c47047931,
  &s_f7d5836ab97d7b7e,
};
static const uint16_t m_82d74e22b57a02f1[] = {1, 0};
const ::capnp::_::RawSchema s_82d74e22b57a02f1 = {
  0x82d74e22b57a02f1, b_82d74e22b57a02f1.words, 52, d_82d74e22b57a02f1, m_82d74e22b57a02f1,
  4, 2, nullptr, nullptr, nullptr, { &s_82d74e22b57a02f1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ca7d1e99212191ec = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    236, 145,  33,  33, 153,  30, 125, 202,
     18,   0,   0,   0,   1,   0,   0,   0,
    241,   2, 122, 181,  34,  78, 215, 130,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46,  80,  97,  99, 107, 101, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    237,  14, 204, 140,  94,  77,  41, 179,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca7d1e99212191ec = b_ca7d1e99212191ec.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca7d1e99212191ec[] = {
  &s_b3294d5e8ccc0eed,
};
static const uint16_t m_ca7d1e99212191ec[] = {0};
static const uint16_t i_ca7d1e99212191ec[] = {0};
const ::capnp::_::RawSchema s_ca7d1e99212191ec = {
  0xca7d1e99212191ec, b_ca7d1e99212191ec.words, 37, d_ca7d1e99212191ec, m_ca7d1e99212191ec,
  1, 1, i_ca7d1e99212191ec, nullptr, nullptr, { &s_ca7d1e99212191ec, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_b3294d5e8ccc0eed = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    237,  14, 204, 140,  94,  77,  41, 179,
     18,   0,   0,   0,   1,   0,   1,   0,
    241,   2, 122, 181,  34,  78, 215, 130,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46,  69, 110, 116, 114, 121,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b3294d5e8ccc0eed = b_b3294d5e8ccc0eed.words;
#if !CAPNP_LITE
static const uint16_t m_b3294d5e8ccc0eed[] = {0};
static const uint16_t i_b3294d5e8ccc0eed[] = {0};
const ::capnp::_::RawSchema s_b3294d5e8ccc0eed = {
  0xb3294d5e8ccc0eed, b_b3294d5e8ccc0eed.words, 32, nullptr, m_b3294d5e8ccc0eed,
  0, 1, i_b3294d5e8ccc0eed, nullptr, nullptr, { &s_b3294d5e8ccc0eed, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d1b1a814385fae90 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144, 174,  95,  56,  20, 168, 177, 209,
     18,   0,   0,   0,   1,   0,   1,   0,
    241,   2, 122, 181,  34,  78, 215, 130,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46,  65,  99, 116, 117,  97, 108,
     80, 114, 105, 111, 114, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d1b1a814385fae90 = b_d1b1a814385fae90.words;
#if !CAPNP_LITE
static const uint16_t m_d1b1a814385fae90[] = {0};
static const uint16_t i_d1b1a814385fae90[] = {0};
const ::capnp::_::RawSchema s_d1b1a814385fae90 = {
  0xd1b1a814385fae90, b_d1b1a814385fae90.words, 34, nullptr, m_d1b1a814385fae90,
  0, 1, i_d1b1a814385fae90, nullptr, nullptr, { &s_d1b1a814385fae90, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_f5ba73f2fc0136f3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    243,  54,   1, 252, 242, 115, 186, 245,
     18,   0,   0,   0,   3,   0,   0,   0,
    241,   2, 122, 181,  34,  78, 215, 130,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46,  80, 114, 105, 111, 114, 105,
    116, 121,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204, 239,  23,  46,  10, 103,  28, 217,
    184, 224, 115,  67,  50,  75,  60, 220,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    114, 101,  97, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_f5ba73f2fc0136f3 = b_f5ba73f2fc0136f3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f5ba73f2fc0136f3[] = {
  &s_d91c670a2e17efcc,
  &s_dc3c4b324373e0b8,
};
static const uint16_t m_f5ba73f2fc0136f3[] = {0};
const ::capnp::_::RawSchema s_f5ba73f2fc0136f3 = {
  0xf5ba73f2fc0136f3, b_f5ba73f2fc0136f3.words, 29, d_f5ba73f2fc0136f3, m_f5ba73f2fc0136f3,
  2, 1, nullptr, nullptr, nullptr, { &s_f5ba73f2fc0136f3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_d91c670a2e17efcc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204, 239,  23,  46,  10, 103,  28, 217,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46,  80, 114, 105, 111, 114, 105,
    116, 121,  46, 114, 101,  97, 100,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_d91c670a2e17efcc = b_d91c670a2e17efcc.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d91c670a2e17efcc = {
  0xd91c670a2e17efcc, b_d91c670a2e17efcc.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d91c670a2e17efcc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_dc3c4b324373e0b8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184, 224, 115,  67,  50,  75,  60, 220,
     27,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46,  80, 114, 105, 111, 114, 105,
    116, 121,  46, 114, 101,  97, 100,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc3c4b324373e0b8 = b_dc3c4b324373e0b8.words;
#if !CAPNP_LITE
static const uint16_t m_dc3c4b324373e0b8[] = {0};
static const uint16_t i_dc3c4b324373e0b8[] = {0};
const ::capnp::_::RawSchema s_dc3c4b324373e0b8 = {
  0xdc3c4b324373e0b8, b_dc3c4b324373e0b8.words, 33, nullptr, m_dc3c4b324373e0b8,
  0, 1, i_dc3c4b324373e0b8, nullptr, nullptr, { &s_dc3c4b324373e0b8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ec79500c47047931 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     49, 121,   4,  71,  12,  80, 121, 236,
     18,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46, 112, 114, 101, 100, 105,  99,
    116,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97,  99, 107, 101, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    236, 145,  33,  33, 153,  30, 125, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ec79500c47047931 = b_ec79500c47047931.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ec79500c47047931[] = {
  &s_ca7d1e99212191ec,
};
static const uint16_t m_ec79500c47047931[] = {0};
static const uint16_t i_ec79500c47047931[] = {0};
const ::capnp::_::RawSchema s_ec79500c47047931 = {
  0xec79500c47047931, b_ec79500c47047931.words, 33, d_ec79500c47047931, m_ec79500c47047931,
  1, 1, i_ec79500c47047931, nullptr, nullptr, { &s_ec79500c47047931, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e49f3aba7a756d79 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    121, 109, 117, 122, 186,  58, 159, 228,
     18,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46, 112, 114, 101, 100, 105,  99,
    116,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 105, 111, 114, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    243,  54,   1, 252, 242, 115, 186, 245,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e49f3aba7a756d79 = b_e49f3aba7a756d79.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e49f3aba7a756d79[] = {
  &s_f5ba73f2fc0136f3,
};
static const uint16_t m_e49f3aba7a756d79[] = {0};
static const uint16_t i_e49f3aba7a756d79[] = {0};
const ::capnp::_::RawSchema s_e49f3aba7a756d79 = {
  0xe49f3aba7a756d79, b_e49f3aba7a756d79.words, 34, d_e49f3aba7a756d79, m_e49f3aba7a756d79,
  1, 1, i_e49f3aba7a756d79, nullptr, nullptr, { &s_e49f3aba7a756d79, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_a88ee4ea48578816 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     22, 136,  87,  72, 234, 228, 142, 168,
     18,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46, 108, 101,  97, 114, 110,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    112,  97,  99, 107, 101, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    236, 145,  33,  33, 153,  30, 125, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 105, 111, 114, 105, 116, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    144, 174,  95,  56,  20, 168, 177, 209,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a88ee4ea48578816 = b_a88ee4ea48578816.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a88ee4ea48578816[] = {
  &s_ca7d1e99212191ec,
  &s_d1b1a814385fae90,
};
static const uint16_t m_a88ee4ea48578816[] = {0, 1};
static const uint16_t i_a88ee4ea48578816[] = {0, 1};
const ::capnp::_::RawSchema s_a88ee4ea48578816 = {
  0xa88ee4ea48578816, b_a88ee4ea48578816.words, 48, d_a88ee4ea48578816, m_a88ee4ea48578816,
  2, 2, i_a88ee4ea48578816, nullptr, nullptr, { &s_a88ee4ea48578816, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_f7d5836ab97d7b7e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    126, 123, 125, 185, 106, 131, 213, 247,
     18,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,  97, 105, 110,  46,  99,  97,
    112, 110, 112,  58,  66, 114,  97, 105,
    110,  46, 108, 101,  97, 114, 110,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_f7d5836ab97d7b7e = b_f7d5836ab97d7b7e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f7d5836ab97d7b7e = {
  0xf7d5836ab97d7b7e, b_f7d5836ab97d7b7e.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f7d5836ab97d7b7e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Brain::PredictParams,  ::Brain::PredictResults>
Brain::Client::predictRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Brain::PredictParams,  ::Brain::PredictResults>(
      0x82d74e22b57a02f1ull, 0, sizeHint);
}
::kj::Promise<void> Brain::Server::predict(PredictContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "brain.capnp:Brain", "predict",
      0x82d74e22b57a02f1ull, 0);
}
::capnp::Request< ::Brain::LearnParams,  ::Brain::LearnResults>
Brain::Client::learnRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Brain::LearnParams,  ::Brain::LearnResults>(
      0x82d74e22b57a02f1ull, 1, sizeHint);
}
::kj::Promise<void> Brain::Server::learn(LearnContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "brain.capnp:Brain", "learn",
      0x82d74e22b57a02f1ull, 1);
}
::kj::Promise<void> Brain::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x82d74e22b57a02f1ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("brain.capnp:Brain", interfaceId);
  }
}
::kj::Promise<void> Brain::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return predict(::capnp::Capability::Server::internalGetTypedContext<
           ::Brain::PredictParams,  ::Brain::PredictResults>(context));
    case 1:
      return learn(::capnp::Capability::Server::internalGetTypedContext<
           ::Brain::LearnParams,  ::Brain::LearnResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "brain.capnp:Brain",
          0x82d74e22b57a02f1ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Brain
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Brain::Packet
#ifndef _MSC_VER
constexpr uint16_t Brain::Packet::_capnpPrivate::dataWordSize;
constexpr uint16_t Brain::Packet::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::Packet::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::Packet::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::Packet::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Brain::Entry
#ifndef _MSC_VER
constexpr uint16_t Brain::Entry::_capnpPrivate::dataWordSize;
constexpr uint16_t Brain::Entry::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::Entry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::Entry::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::Entry::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Brain::ActualPriority
#ifndef _MSC_VER
constexpr uint16_t Brain::ActualPriority::_capnpPrivate::dataWordSize;
constexpr uint16_t Brain::ActualPriority::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::ActualPriority::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::ActualPriority::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::ActualPriority::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Brain::Priority::ReadParams,  ::Brain::Priority::ReadResults>
Brain::Priority::Client::readRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Brain::Priority::ReadParams,  ::Brain::Priority::ReadResults>(
      0xf5ba73f2fc0136f3ull, 0, sizeHint);
}
::kj::Promise<void> Brain::Priority::Server::read(ReadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "brain.capnp:Brain.Priority", "read",
      0xf5ba73f2fc0136f3ull, 0);
}
::kj::Promise<void> Brain::Priority::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf5ba73f2fc0136f3ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("brain.capnp:Brain.Priority", interfaceId);
  }
}
::kj::Promise<void> Brain::Priority::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return read(::capnp::Capability::Server::internalGetTypedContext<
           ::Brain::Priority::ReadParams,  ::Brain::Priority::ReadResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "brain.capnp:Brain.Priority",
          0xf5ba73f2fc0136f3ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Brain::Priority
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::Priority::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::Priority::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::Priority::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Brain::Priority::ReadParams
#ifndef _MSC_VER
constexpr uint16_t Brain::Priority::ReadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Brain::Priority::ReadParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::Priority::ReadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::Priority::ReadParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::Priority::ReadParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Brain::Priority::ReadResults
#ifndef _MSC_VER
constexpr uint16_t Brain::Priority::ReadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Brain::Priority::ReadResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::Priority::ReadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::Priority::ReadResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::Priority::ReadResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Brain::PredictParams
#ifndef _MSC_VER
constexpr uint16_t Brain::PredictParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Brain::PredictParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::PredictParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::PredictParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::PredictParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Brain::PredictResults
#ifndef _MSC_VER
constexpr uint16_t Brain::PredictResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Brain::PredictResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::PredictResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::PredictResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::PredictResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Brain::LearnParams
#ifndef _MSC_VER
constexpr uint16_t Brain::LearnParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Brain::LearnParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::LearnParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::LearnParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::LearnParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Brain::LearnResults
#ifndef _MSC_VER
constexpr uint16_t Brain::LearnResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Brain::LearnResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Brain::LearnResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Brain::LearnResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Brain::LearnResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



